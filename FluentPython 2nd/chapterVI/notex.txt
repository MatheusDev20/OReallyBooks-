> Variables holds references to objects, not store them.
> Think variables as labels who bind to objects, a single object could have one or more labels attached
> While == compares values of objects and "is" Keyword compares their identity (id(object))
> Most common use case of "is" is compare if a variable is bound to None

-> Shallow Copy
  -> When you copy a object using shallow copy (default) the elements inside the collection share the same
    reference, so if it is mutable objects like lists, this objects can be change in both the original and the copy

-> Deep Copy 
  -> The objects do NOT share the same references, use the module 'copy' with the method 'deepcopy' to create

-> Formal parameters in functions are passed as references to the actual objects, so if the object 
is mutable (list or dict), changes inside the function will reflected outside.

-> DO NOT! Intializa a parameter with a muttable object as a optional paramter, def(a=[])
this could cause bugs because the elements will share the reference to the same mutable obj When
the function is loaded, so every call will use the same list
